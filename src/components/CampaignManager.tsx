import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Progress } from "@/components/ui/progress";
import { useToast } from "@/components/ui/use-toast";
import { 
  MessageCircle, 
  Plus, 
  Play,
  Pause,
  Square,
  Settings,
  Users,
  Clock,
  CheckCircle,
  AlertCircle,
  BarChart3,
  Send
} from "lucide-react";

interface Campaign {
  id: number;
  name: string;
  message: string;
  contactListName: string;
  totalTargets: number;
  sent: number;
  delivered: number;
  status: "draft" | "running" | "paused" | "completed" | "stopped";
  createdAt: string;
  scheduledFor?: string;
}

const CampaignManager = () => {
  const [campaigns, setCampaigns] = useState<Campaign[]>([
    {
      id: 1,
      name: "–í–µ—Å–µ–Ω–Ω—è—è –∞–∫—Ü–∏—è",
      message: "üå∏ –í–µ—Å–µ–Ω–Ω—è—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞! –°–∫–∏–¥–∫–∏ –¥–æ 50% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã. –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!",
      contactListName: "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã",
      totalTargets: 892,
      sent: 245,
      delivered: 238,
      status: "running",
      createdAt: "2024-01-20",
    },
    {
      id: 2,
      name: "VIP –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
      message: "üíé –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è VIP –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 30%!",
      contactListName: "VIP –∫–ª–∏–µ–Ω—Ç—ã",
      totalTargets: 256,
      sent: 256,
      delivered: 251,
      status: "completed",
      createdAt: "2024-01-18",
    },
    {
      id: 3,
      name: "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è",
      message: "üéÑ –° –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º –ù–æ–≤—ã–º –≥–æ–¥–æ–º! –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è!",
      contactListName: "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã",
      totalTargets: 1580,
      sent: 0,
      delivered: 0,
      status: "draft",
      createdAt: "2024-01-15",
    },
  ]);

  const [showCreateForm, setShowCreateForm] = useState(false);
  const [newCampaign, setNewCampaign] = useState({
    name: "",
    message: "",
    contactList: "",
    schedule: "",
  });
  const { toast } = useToast();

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "running":
        return <Badge className="bg-telegram-blue/10 text-telegram-blue border-telegram-blue/20">–ê–∫—Ç–∏–≤–Ω–∞</Badge>;
      case "completed":
        return <Badge className="bg-telegram-success/10 text-telegram-success border-telegram-success/20">–ó–∞–≤–µ—Ä—à–µ–Ω–∞</Badge>;
      case "paused":
        return <Badge className="bg-telegram-warning/10 text-telegram-warning border-telegram-warning/20">–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</Badge>;
      case "draft":
        return <Badge variant="outline">–ß–µ—Ä–Ω–æ–≤–∏–∫</Badge>;
      case "stopped":
        return <Badge className="bg-telegram-error/10 text-telegram-error border-telegram-error/20">–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</Badge>;
      default:
        return <Badge variant="secondary">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</Badge>;
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "running":
        return <Play className="h-4 w-4 text-telegram-blue" />;
      case "completed":
        return <CheckCircle className="h-4 w-4 text-telegram-success" />;
      case "paused":
        return <Pause className="h-4 w-4 text-telegram-warning" />;
      case "draft":
        return <Settings className="h-4 w-4 text-muted-foreground" />;
      case "stopped":
        return <Square className="h-4 w-4 text-telegram-error" />;
      default:
        return <AlertCircle className="h-4 w-4 text-muted-foreground" />;
    }
  };

  const handleCreateCampaign = () => {
    if (!newCampaign.name || !newCampaign.message || !newCampaign.contactList) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        variant: "destructive",
      });
      return;
    }

    const campaign: Campaign = {
      id: Date.now(),
      name: newCampaign.name,
      message: newCampaign.message,
      contactListName: newCampaign.contactList,
      totalTargets: Math.floor(Math.random() * 1000) + 100,
      sent: 0,
      delivered: 0,
      status: "draft",
      createdAt: new Date().toISOString().split('T')[0],
      scheduledFor: newCampaign.schedule || undefined,
    };

    setCampaigns([campaign, ...campaigns]);
    setNewCampaign({ name: "", message: "", contactList: "", schedule: "" });
    setShowCreateForm(false);

    toast({
      title: "–£—Å–ø–µ—Ö!",
      description: "–ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫",
    });
  };

  const controlCampaign = (id: number, action: "start" | "pause" | "stop") => {
    setCampaigns(prev => prev.map(campaign => {
      if (campaign.id === id) {
        switch (action) {
          case "start":
            return { ...campaign, status: "running" as const };
          case "pause":
            return { ...campaign, status: "paused" as const };
          case "stop":
            return { ...campaign, status: "stopped" as const };
        }
      }
      return campaign;
    }));

    const actionText = action === "start" ? "–∑–∞–ø—É—â–µ–Ω–∞" : action === "pause" ? "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞" : "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞";
    toast({
      title: "–ö–∞–º–ø–∞–Ω–∏—è " + actionText,
      description: `–°—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω`,
    });
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-foreground">–ö–∞–º–ø–∞–Ω–∏–∏</h2>
          <p className="text-muted-foreground">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</p>
        </div>
        <Button 
          onClick={() => setShowCreateForm(true)}
          className="bg-gradient-telegram shadow-telegram"
        >
          <Plus className="h-4 w-4 mr-2" />
          –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é
        </Button>
      </div>

      {/* Create Campaign Form */}
      {showCreateForm && (
        <Card className="bg-card/80 backdrop-blur-sm border-0 shadow-card-soft">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Plus className="h-5 w-5 text-telegram-blue" />
              <span>–ù–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <Label htmlFor="campaignName">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏</Label>
                  <Input
                    id="campaignName"
                    value={newCampaign.name}
                    onChange={(e) => setNewCampaign({ ...newCampaign, name: e.target.value })}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –õ–µ—Ç–Ω—è—è –∞–∫—Ü–∏—è"
                    className="mt-1"
                  />
                </div>
                <div>
                  <Label htmlFor="contactList">–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</Label>
                  <Select onValueChange={(value) => setNewCampaign({ ...newCampaign, contactList: value })}>
                    <SelectTrigger className="mt-1">
                      <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (892 –∫–æ–Ω—Ç–∞–∫—Ç–∞)</SelectItem>
                      <SelectItem value="VIP –∫–ª–∏–µ–Ω—Ç—ã">VIP –∫–ª–∏–µ–Ω—Ç—ã (256 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤)</SelectItem>
                      <SelectItem value="–ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏">–ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ (734 –∫–æ–Ω—Ç–∞–∫—Ç–∞)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="schedule">–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
                  <Input
                    id="schedule"
                    type="datetime-local"
                    value={newCampaign.schedule}
                    onChange={(e) => setNewCampaign({ ...newCampaign, schedule: e.target.value })}
                    className="mt-1"
                  />
                </div>
              </div>
              <div>
                <Label htmlFor="message">–°–æ–æ–±—â–µ–Ω–∏–µ</Label>
                <Textarea
                  id="message"
                  value={newCampaign.message}
                  onChange={(e) => setNewCampaign({ ...newCampaign, message: e.target.value })}
                  placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è..."
                  className="mt-1 min-h-[120px] resize-none"
                />
                <p className="text-xs text-muted-foreground mt-2">
                  {newCampaign.message.length}/4096 —Å–∏–º–≤–æ–ª–æ–≤
                </p>
              </div>
            </div>
            <div className="flex justify-end space-x-3 mt-6">
              <Button variant="outline" onClick={() => setShowCreateForm(false)}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button onClick={handleCreateCampaign} className="bg-gradient-telegram shadow-telegram">
                <Send className="h-4 w-4 mr-2" />
                –°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Campaigns List */}
      <div className="space-y-4">
        {campaigns.map((campaign) => (
          <Card key={campaign.id} className="bg-card/80 backdrop-blur-sm border-0 shadow-card-soft">
            <CardContent className="p-6">
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-start space-x-4">
                  <div className="p-3 bg-telegram-blue/10 rounded-telegram">
                    {getStatusIcon(campaign.status)}
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-foreground">{campaign.name}</h3>
                    <p className="text-sm text-muted-foreground mb-2">
                      –°–ø–∏—Å–æ–∫: {campaign.contactListName} ‚Ä¢ –°–æ–∑–¥–∞–Ω–∞ {campaign.createdAt}
                    </p>
                    <p className="text-sm text-foreground bg-secondary/50 p-2 rounded-md">
                      {campaign.message}
                    </p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  {getStatusBadge(campaign.status)}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
                <div className="text-center p-3 rounded-telegram bg-gradient-subtle border border-border/30">
                  <p className="text-xl font-bold text-foreground">{campaign.totalTargets}</p>
                  <p className="text-xs text-muted-foreground">–¶–µ–ª–µ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</p>
                </div>
                <div className="text-center p-3 rounded-telegram bg-gradient-subtle border border-border/30">
                  <p className="text-xl font-bold text-telegram-blue">{campaign.sent}</p>
                  <p className="text-xs text-muted-foreground">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</p>
                </div>
                <div className="text-center p-3 rounded-telegram bg-gradient-subtle border border-border/30">
                  <p className="text-xl font-bold text-telegram-success">{campaign.delivered}</p>
                  <p className="text-xs text-muted-foreground">–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</p>
                </div>
                <div className="text-center p-3 rounded-telegram bg-gradient-subtle border border-border/30">
                  <p className="text-xl font-bold text-telegram-warning">
                    {campaign.totalTargets > 0 ? Math.round((campaign.delivered / campaign.totalTargets) * 100) : 0}%
                  </p>
                  <p className="text-xs text-muted-foreground">–ö–æ–Ω–≤–µ—Ä—Å–∏—è</p>
                </div>
              </div>

              {campaign.status === "running" && (
                <div className="mb-4">
                  <div className="flex items-center justify-between text-sm mb-2">
                    <span className="text-muted-foreground">–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏</span>
                    <span className="text-foreground">{Math.round((campaign.sent / campaign.totalTargets) * 100)}%</span>
                  </div>
                  <Progress value={(campaign.sent / campaign.totalTargets) * 100} className="h-2" />
                </div>
              )}

              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4 text-sm text-muted-foreground">
                  <div className="flex items-center space-x-1">
                    <Users className="h-4 w-4" />
                    <span>{campaign.totalTargets} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π</span>
                  </div>
                  {campaign.scheduledFor && (
                    <div className="flex items-center space-x-1">
                      <Clock className="h-4 w-4" />
                      <span>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {new Date(campaign.scheduledFor).toLocaleString()}</span>
                    </div>
                  )}
                </div>
                <div className="flex items-center space-x-2">
                  {campaign.status === "draft" || campaign.status === "paused" ? (
                    <Button
                      size="sm"
                      onClick={() => controlCampaign(campaign.id, "start")}
                      className="bg-gradient-telegram shadow-telegram"
                    >
                      <Play className="h-4 w-4 mr-2" />
                      {campaign.status === "draft" ? "–ó–∞–ø—É—Å—Ç–∏—Ç—å" : "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å"}
                    </Button>
                  ) : campaign.status === "running" ? (
                    <>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => controlCampaign(campaign.id, "pause")}
                      >
                        <Pause className="h-4 w-4 mr-2" />
                        –ü–∞—É–∑–∞
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => controlCampaign(campaign.id, "stop")}
                        className="text-telegram-error hover:text-telegram-error"
                      >
                        <Square className="h-4 w-4 mr-2" />
                        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                      </Button>
                    </>
                  ) : (
                    <Button variant="outline" size="sm">
                      <BarChart3 className="h-4 w-4 mr-2" />
                      –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    </Button>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default CampaignManager;