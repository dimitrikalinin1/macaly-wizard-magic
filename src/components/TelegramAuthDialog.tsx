import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { 
  Loader2, 
  Smartphone, 
  MessageSquare, 
  Shield, 
  CheckCircle,
  AlertCircle 
} from "lucide-react";
import { TelegramAccount } from "@/hooks/useTelegramAccounts";

interface TelegramAuthDialogProps {
  isOpen: boolean;
  onClose: () => void;
  account: TelegramAccount | null;
  onSuccess: () => void;
}

type AuthStep = 'send_code' | 'verify_code' | 'verify_2fa' | 'completed';

const TelegramAuthDialog = ({ isOpen, onClose, account, onSuccess }: TelegramAuthDialogProps) => {
  const [step, setStep] = useState<AuthStep>('send_code');
  const [loading, setLoading] = useState(false);
  const [phoneCode, setPhoneCode] = useState('');
  const [twoFactorPassword, setTwoFactorPassword] = useState('');
  const { toast } = useToast();

  const resetDialog = () => {
    setStep('send_code');
    setPhoneCode('');
    setTwoFactorPassword('');
    setLoading(false);
  };

  const handleClose = () => {
    resetDialog();
    onClose();
  };

  const callTelegramAuth = async (action: string, extraData = {}) => {
    try {
      const { data, error } = await supabase.functions.invoke('telegram-auth', {
        body: {
          action,
          accountId: account?.id,
          ...extraData
        }
      });

      if (error) {
        console.error('Telegram auth error:', error);
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const errorMessage = error.message || String(error);
        toast({
          title: "–û—à–∏–±–∫–∞ Telegram API",
          description: errorMessage,
          variant: "destructive",
        });
        throw new Error(errorMessage);
      }
      return data;
    } catch (err: any) {
      console.error('Unexpected error:', err);
      const errorMessage = err?.message || String(err);
      toast({
        title: "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞",
        description: errorMessage,
        variant: "destructive",
      });
      throw err;
    }
  };

  const handleSendCode = async () => {
    if (!account) return;

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —É –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã API ID –∏ API Hash
    if (!account.api_id || !account.api_hash) {
      toast({
        title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ API ID –∏ API Hash, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞ my.telegram.org",
        variant: "destructive",
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneRegex = /^\+\d{10,15}$/;
    if (!phoneRegex.test(account.phone_number)) {
      toast({
        title: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä +79161234567",
        variant: "destructive",
      });
      return;
    }
    
    setLoading(true);
    try {
      const result = await callTelegramAuth('send_code');
      
      if (result?.error === 'FLOOD_WAIT') {
        toast({
          title: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫',
          description: result.message || '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
          variant: 'destructive',
        });
        return;
      }
      
      if (result?.success) {
        setStep('verify_code');
        toast({
          title: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
          description: result.message,
        });
      } else {
        throw new Error(result?.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞');
      }
    } catch (error: any) {
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ callTelegramAuth, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∑–¥–µ—Å—å
      console.error('Send code failed:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleVerifyCode = async () => {
    if (!phoneCode.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ SMS –∫–æ–¥",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      const result = await callTelegramAuth('verify_code', { phoneCode });

      if (result?.error === 'FLOOD_WAIT') {
        toast({
          title: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫',
          description: result.message || '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
          variant: 'destructive',
        });
        return;
      }
      
      if (result?.success) {
        if (result.nextStep === 'verify_2fa') {
          setStep('verify_2fa');
        } else if (result.nextStep === 'completed') {
          setStep('completed');
          onSuccess();
        }
        
        toast({
          title: '–£—Å–ø–µ—Ö!',
          description: result.message,
        });
      } else {
        throw new Error(result?.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞');
      }
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å SMS –∫–æ–¥",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleVerify2FA = async () => {
    if (!twoFactorPassword.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      const result = await callTelegramAuth('verify_2fa', { twoFactorPassword });

      if (result?.error === 'FLOOD_WAIT') {
        toast({
          title: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫',
          description: result.message || '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
          variant: 'destructive',
        });
        return;
      }
      
      if (result?.success) {
        setStep('completed');
        onSuccess();
        toast({
          title: '–£—Å–ø–µ—Ö!',
          description: result.message,
        });
      } else {
        throw new Error(result?.error || '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2FA');
      }
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å 2FA",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleTestConnection = async () => {
    if (!account) return;
    
    setLoading(true);
    try {
      const result = await callTelegramAuth('test_connection');
      
      if (result.success) {
        toast({
          title: "–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!",
          description: result.message,
        });
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      }
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const getStepIcon = () => {
    switch (step) {
      case 'send_code':
        return <Smartphone className="h-8 w-8 text-telegram-blue" />;
      case 'verify_code':
        return <MessageSquare className="h-8 w-8 text-telegram-warning" />;
      case 'verify_2fa':
        return <Shield className="h-8 w-8 text-telegram-error" />;
      case 'completed':
        return <CheckCircle className="h-8 w-8 text-telegram-success" />;
      default:
        return <AlertCircle className="h-8 w-8 text-muted-foreground" />;
    }
  };

  const getStepTitle = () => {
    switch (step) {
      case 'send_code':
        return '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram –∞–∫–∫–∞—É–Ω—Ç–∞';
      case 'verify_code':
        return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ SMS –∫–æ–¥–∞';
      case 'verify_2fa':
        return '–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è';
      case 'completed':
        return '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
      default:
        return '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è';
    }
  };

  const renderStepContent = () => {
    switch (step) {
      case 'send_code':
        return (
          <div className="space-y-4">
            <div className="p-4 rounded-telegram bg-telegram-blue/5 border border-telegram-blue/20">
              <div className="flex items-center space-x-3 mb-3">
                <Smartphone className="h-5 w-5 text-telegram-blue" />
                <div>
                  <p className="font-medium text-foreground">–ê–∫–∫–∞—É–Ω—Ç: {account?.phone_number}</p>
                  <p className="text-sm text-muted-foreground">API ID: {account?.api_id}</p>
                </div>
              </div>
              <p className="text-sm text-muted-foreground mb-3">
                –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º SMS –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Telegram
              </p>
              <div className="p-2 bg-background rounded border text-xs text-muted-foreground">
                üì± <strong>–†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</strong> SMS –∫–æ–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ Telegram API
              </div>
            </div>
            
            <div className="flex justify-end space-x-3">
              <Button variant="outline" onClick={handleClose} disabled={loading}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button 
                onClick={handleSendCode} 
                disabled={loading}
                className="bg-gradient-telegram shadow-telegram"
              >
                {loading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    –û—Ç–ø—Ä–∞–≤–∫–∞...
                  </>
                ) : (
                  '–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –∫–æ–¥'
                )}
              </Button>
            </div>
          </div>
        );

      case 'verify_code':
        return (
          <div className="space-y-4">
            <div className="p-4 rounded-telegram bg-telegram-warning/5 border border-telegram-warning/20">
              <MessageSquare className="h-5 w-5 text-telegram-warning mb-2" />
              <p className="text-sm text-muted-foreground mb-2">
                SMS –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {account?.phone_number}. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:
              </p>
            </div>
            
            <div>
              <Label htmlFor="phoneCode">SMS –∫–æ–¥</Label>
              <Input
                id="phoneCode"
                type="text"
                placeholder="12345"
                value={phoneCode}
                onChange={(e) => setPhoneCode(e.target.value.replace(/\D/g, '').slice(0, 5))}
                maxLength={5}
                className="text-center text-lg font-mono"
                autoFocus
              />
            </div>
            
            <div className="flex justify-end space-x-3">
              <Button variant="outline" onClick={handleClose} disabled={loading}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button 
                onClick={handleVerifyCode} 
                disabled={loading || phoneCode.length !== 5}
                className="bg-gradient-telegram shadow-telegram"
              >
                {loading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    –ü—Ä–æ–≤–µ—Ä–∫–∞...
                  </>
                ) : (
                  '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥'
                )}
              </Button>
            </div>
          </div>
        );

      case 'verify_2fa':
        return (
          <div className="space-y-4">
            <div className="p-4 rounded-telegram bg-telegram-error/5 border border-telegram-error/20">
              <Shield className="h-5 w-5 text-telegram-error mb-2" />
              <p className="text-sm text-muted-foreground mb-2">
                –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:
              </p>
            </div>
            
            <div>
              <Label htmlFor="twoFactorPassword">–ü–∞—Ä–æ–ª—å 2FA</Label>
              <Input
                id="twoFactorPassword"
                type="password"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA"
                value={twoFactorPassword}
                onChange={(e) => setTwoFactorPassword(e.target.value)}
                autoFocus
              />
            </div>
            
            <div className="flex justify-end space-x-3">
              <Button variant="outline" onClick={handleClose} disabled={loading}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button 
                onClick={handleVerify2FA} 
                disabled={loading || !twoFactorPassword.trim()}
                className="bg-gradient-telegram shadow-telegram"
              >
                {loading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    –ü—Ä–æ–≤–µ—Ä–∫–∞...
                  </>
                ) : (
                  '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å'
                )}
              </Button>
            </div>
          </div>
        );

      case 'completed':
        return (
          <div className="space-y-4">
            <div className="p-4 rounded-telegram bg-telegram-success/5 border border-telegram-success/20 text-center">
              <CheckCircle className="h-8 w-8 text-telegram-success mx-auto mb-3" />
              <p className="font-medium text-telegram-success mb-2">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</p>
              <p className="text-sm text-muted-foreground">
                –ê–∫–∫–∞—É–Ω—Ç {account?.phone_number} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
              </p>
            </div>
            
            <div className="flex justify-end space-x-3">
              <Button 
                variant="outline" 
                onClick={handleTestConnection} 
                disabled={loading}
              >
                {loading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    –û—Ç–ø—Ä–∞–≤–∫–∞...
                  </>
                ) : (
                  '–¢–µ—Å—Ç @dimitarius'
                )}
              </Button>
              <Button 
                onClick={handleClose}
                className="bg-gradient-telegram shadow-telegram"
              >
                –ì–æ—Ç–æ–≤–æ
              </Button>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-3">
            {getStepIcon()}
            <span>{getStepTitle()}</span>
          </DialogTitle>
          <DialogDescription className="text-muted-foreground">
            {step === 'send_code' && '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram –∞–∫–∫–∞—É–Ω—Ç—É'}
            {step === 'verify_code' && '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ SMS'}
            {step === 'verify_2fa' && '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'}
            {step === 'completed' && '–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω'}
          </DialogDescription>
        </DialogHeader>
        
        {renderStepContent()}
      </DialogContent>
    </Dialog>
  );
};

export default TelegramAuthDialog;